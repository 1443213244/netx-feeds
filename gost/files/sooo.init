#!/bin/sh /etc/rc.common

USE_PROCD=1

START=99
STOP=98

serverSet="proxy_ipset"
InternalIPSet="internal_ipset"
GreatFireWallIPSet="gfw_ipset"
ChinaIPSet="china_ipset"

# sooo状态
enable="$(uci get sooo.@sooo[0].enable)"

# redirect 端口
SniPort=1443
RedirectPort=8443

# 代理 ip
server="$(uci get sooo.@sooo[0].server)"
# 代理端口
server_port="$(uci get sooo.@sooo[0].port)"
# 加速模式
model="$(uci get sooo.@sooo[0].model)"
# 加速算法
accelerate="$(uci get sooo.@sooo[0].accelerate)"
#分流
shunt="$(uci get sooo.@sooo[0].shunt)"
SoooProxyCommand="$(uci get sooo.@sooo[0].command)"
SoooProxyCommand1="-F=h2c://127.0.0.1:1080"

# sooo 路径
BinaryPath="/usr/bin/sooo"
GfwList="/usr/share/sooo/gfwlist.conf"
ChinaList="/usr/share/sooo/cn.zon"

create_ipset() {
        ipset -N -! ${serverSet} hash:net maxelem 1000000
        ipset -N -! ${InternalIPSet} hash:net maxelem 1000000
        ipset -N -! ${GreatFireWallIPSet} hash:net maxelem 1000000
        ipset -N -! ${ChinaIPSet} hash:net maxelem 1000000

        # 将代理 IP 添加到 ipset 中
        ipset add ${serverSet} ${server}

        # 保留地址也直接连接，不通过代理
        ipset add ${InternalIPSet} 0.0.0.0/8
        ipset add ${InternalIPSet} 10.0.0.0/8
        ipset add ${InternalIPSet} 127.0.0.0/8
        ipset add ${InternalIPSet} 169.254.0.0/16
        ipset add ${InternalIPSet} 172.16.0.0/12
        ipset add ${InternalIPSet} 192.168.0.0/16
        ipset add ${InternalIPSet} 224.0.0.0/4
        ipset add ${InternalIPSet} 240.0.0.0/4
}

create_iptables() {
        echo "create iptable rule for sooo"
        # check chain exists or not
        iptables -t nat -C SOOO >/dev/null 2>&1
        if [ $? -eq 0 ]; then
                echo "iptables chain sooo exists, ignore command..."
        else
                echo "create iptables chain: sooo"
                iptables -t nat -N SOOO
        fi

        # 清空 sooo chain 规则
        iptables -t nat -F SOOO

        # 代理 IP 不走代理
        iptables -t nat -I SOOO 1 -p all -m set --match-set ${serverSet} dst -j ACCEPT
        # 内部 IP 不走代理
        iptables -t nat -I SOOO 2 -p all -m set --match-set ${InternalIPSet} dst -j ACCEPT
        # GFW IP 走代理
        iptables -t nat -I SOOO 3 -p tcp --dport 443 -m set --match-set ${GreatFireWallIPSet} dst -j REDIRECT --to-port ${SniPort}
        iptables -t nat -I SOOO 4 -p tcp -m set --match-set ${GreatFireWallIPSet} dst -j REDIRECT --to-port ${RedirectPort}
        # 中国 IP 不走代理
        iptables -t nat -I SOOO 5 -p tcp -m set --match-set ${ChinaIPSet} dst -j ACCEPT
        #　其他 IP 走代理
        iptables -t nat -I SOOO 6 -p tcp --dport 443 -j REDIRECT --to-port ${SniPort}
        iptables -t nat -I SOOO 7 -p tcp -j REDIRECT --to-port ${RedirectPort}

        # 将 OUTPUT 和 PREROUTING 的数据转发到 SOOO 链上
        # iptables -t nat -A OUTPUT -p all -j SOOO
        # iptables -t nat -D PREROUTING -p all -j SOOO
        iptables -t nat -I PREROUTING 1 -p all -j SOOO
}

remove_iptables() {
        echo "remove sooo iptable rules"
        iptables -t nat -D PREROUTING -p all -j SOOO
        iptables -t nat -F SOOO
        iptables -t nat -X SOOO

        ipset flush ${serverSet}
        ipset flush ${InternalIPSet}
        ipset flush ${GreatFireWallIPSet}
        ipset flush ${ChinaIPSet}
}

start_client(){
        echo "start client"
          procd_open_instance sooo_client
          procd_set_param command /bin/sh -c "${BinaryPath}  -L sni://:${SniPort} -L=redirect://:${RedirectPort} ${SoooroxyCommand1}  > /tmp/sooo.log 2>&1"
          procd_set_param respawn
          [ -e /proc/sys/kernel/core_pattern ] && {
                  procd_set_param limits core="unlimited"
          }
          procd_close_instance

}

start_accelerate(){
        if [ "${accelerate}" == "1" ]; then
          sysctl -w net.ipv4.tcp_congestion_control="cubic"
        else
          sysctl -w net.ipv4.tcp_congestion_control="bbr"
        fi
}

start_dns(){
            procd_open_instance dns
            procd_set_param command /bin/sh -c "${BinaryPath}  -L dns://:5353?dns=tls,https://223.5.5.5/dns-query  > /tmp/sooo.log 2>&1"
            procd_set_param respawn
            [ -e /proc/sys/kernel/core_pattern ] && {
                    procd_set_param limits core="unlimited"
            }
            procd_close_instance
}

start_shunt(){
        if [ "${shunt}" == "2" ]; then
         cp ${GfwList} /tmp/dnsmasq.d/gfwlist.conf
         for i in $(cat /usr/share/sooo/cn.zone); do echo $i; ipset add china_ipset $i >> /dev/null 2>&1; done
        fi
}

stop_shunt(){
      rm /tmp/dnsmasq.d/*
      ipset -F
}

start_service() {
        if [ "${enable}" == "1" ]; then
          if [ "${model}" == "1" ]; then
  	        echo "start server at model 1"
            procd_open_instance sooo
            procd_set_param command /bin/sh -c "${BinaryPath}  -L h2c://:1080 ${SoooProxyCommand}  > /tmp/sooo.log 2>&1"
            procd_set_param respawn
            [ -e /proc/sys/kernel/core_pattern ] && {
                    procd_set_param limits core="unlimited"
            }
            procd_close_instance
          else
            echo "start server at model 2"
            procd_open_instance sooo
            procd_set_param command /bin/sh -c "${BinaryPath} -L h2c://:1080 > /tmp/sooo.log 2>&1"
            procd_set_param respawn
            [ -e /proc/sys/kernel/core_pattern ] && {
                    procd_set_param limits core="unlimited"
            }
            procd_close_instance 
          fi
          create_ipset
          create_iptables
          #start_dns
          start_client
          start_accelerate
          start_shunt
       else
         stop_service
       fi   
}

kill_sooo(){
        local service_pid=""

        service_pid=$(ps -w | grep sooo | grep -v grep | awk '{print $1}'|sort -r| head -1)
        if [ "${service_pid}" != "" ]; then
                kill -2 ${service_pid}
        fi

        # force kill process
        service_pid=$(ps -w | grep sooo | grep -v grep | awk '{print $1}'|sort -r| head -1)
        if [ "${service_pid}" != "" ]; then
                sleep 3
                kill -9 ${service_pid}
        fi
}

stop_service() {
        echo "stop"
        remove_iptables
        
        # for i in 1 2;
        # do
        #  kill_SOOO
        # done
        stop_shunt
        killall -9 sooo
        
}

reload_service() {
        echo "restart"
        stop_service
        start_service
}

status_service() {
        local service_pid=""

        service_pid=$(ps -w | grep sooo | grep -v grep | awk '{print $1}')
        if [ "${service_pid}" != "" ]; then
                echo "sooo is running"
                return 1
        else
                echo "sooo is not running"
                return 0
        fi
}
